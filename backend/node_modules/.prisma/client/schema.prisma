// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password_hash     String
  first_name        String
  last_name         String
  phone             String?
  address           String?
  bio               String?
  profile_image_url String?
  is_admin          Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  // Relations
  pets                Pet[]
  certificates        Certificate[]
  work_experiences    WorkExperience[]
  availability_slots  AvailabilitySlot[]
  sitting_requests    SittingRequest[]    @relation("Requester")
  sitting_assignments SittingAssignment[] @relation("Sitter")

  @@map("users")
}

model Certificate {
  id                   Int       @id @default(autoincrement())
  user_id              Int
  name                 String
  issuing_organization String?
  issue_date           DateTime?
  expiry_date          DateTime?
  file_url             String
  verified             Boolean   @default(false)
  created_at           DateTime  @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  user_id      Int
  title        String
  organization String?
  start_date   DateTime
  end_date     DateTime?
  description  String?
  created_at   DateTime  @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("work_experiences")
}

model Pet {
  id          Int      @id @default(autoincrement())
  owner_id    Int
  name        String
  animal_type String
  breed       String?
  sub_breed   String?
  age         Int?
  color       String?
  markers     String?
  allergies   String?
  diet        String?
  preferences String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  // Relations
  owner            User             @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  sitting_requests SittingRequest[]

  @@map("pets")
}

model AvailabilitySlot {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  date               DateTime
  start_time         String
  end_time           String
  max_pets           Int      @default(1)
  accepted_pet_types Json? // Stored as a JSON array of strings
  created_at         DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("availability_slots")
}

model SittingRequest {
  id             Int      @id @default(autoincrement())
  requester_id   Int
  pet_id         Int
  start_datetime DateTime
  end_datetime   DateTime
  status         String   @default("pending") // pending, accepted, completed, cancelled
  notes          String?
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  // Relations
  requester           User                @relation("Requester", fields: [requester_id], references: [id], onDelete: Cascade)
  pet                 Pet                 @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  sitting_assignments SittingAssignment[]

  @@map("sitting_requests")
}

model SittingAssignment {
  id             Int      @id @default(autoincrement())
  request_id     Int
  sitter_id      Int
  status         String   @default("accepted") // accepted, completed, cancelled
  review_rating  Int?
  review_comment String?
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  // Relations
  request SittingRequest @relation(fields: [request_id], references: [id], onDelete: Cascade)
  sitter  User           @relation("Sitter", fields: [sitter_id], references: [id], onDelete: Cascade)

  @@map("sitting_assignments")
}
